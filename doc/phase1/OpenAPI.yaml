openapi: 3.0.0
info:
  title: Projekt Cool-Aid
  description: Office hours booking system. Legally distinct from the trademarked beverage.
  version: 0.0.1

paths:
  /user:
    post:
      summary: Add/edit a user.
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '200':
          description: Successfully added user.

  /user/{utorId}:
    get:
      summary: Return a user.
      parameters:
      - name: utorId
        in: path
        required: true
        description: UtorID of the user (e.g. "rossbob2").
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user.
      parameters:
      - name: utorId
        in: path
        required: true
        description: UtorID of the user (e.g. "rossbob2").
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted user.

  /user/{utorId}/blocks:
    get:
      summary: Return blocks relevant to the user, upholding note privacy.
      parameters:
      - name: utorId
        in: path
        required: true
        description: UtorID of the user (e.g. "rossbob2").
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned user's blocks and private notes.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Block'

  /course/{courseCode}:
    post:
      summary: Add/edit a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        description: Course code (e.g. "csc302").
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CourseBody'
      responses:
        '200':
          description: Successfully added course.
    get:
      summary: Return a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        description: Course code (e.g. "csc302").
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned course.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      summary: Delete a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        description: Course code (e.g. "csc302").
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted course.

  /blocks:
    post:
      summary: Add/edit a block. 'author' and 'startTime' act as the key.
      requestBody:
        $ref: '#/components/requestBodies/BlockBody'
      responses:
        '200':
          description: Successfully added block.
    get:
      summary: Return all blocks, can filter by query parameters.
      parameters:
      - in: query
        name: author
        description: UtorID of the author of the block (e.g. "rossbob2").
        schema:
          type: string
      - in: query
        name: startTime
        description: ISO 8601 formatted time (e.g "2008-09-15T15:53:00").
        schema:
          type: string
      - in: query
        name: courseCode
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned blocks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'

  /blocks/{utorId}/{startTime}:
    get:
      summary: Return a specific block.
      parameters:
      - name: utorId
        in: path
        required: true
        description: UtorID of the author of the block (e.g. "rossbob2").
        schema:
          type: string
      - name: startTime
        in: path
        required: true
        description: ISO 8601 formatted time (e.g "2008-09-15T15:53:00").
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned block.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
    delete:
      summary: Delete a specific block.
      parameters:
      - name: utorId
        in: path
        required: true
        description: UtorID of the author of the block (e.g. "rossbob2").
        schema:
          type: string
      - name: startTime
        in: path
        required: true
        description: ISO 8601 formatted time (e.g "2008-09-15T15:53:00").
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted block.

  /blocks/{utorId}/{startTime}/{slot}:
    get:
      summary: Return student and note registered to slot.
      parameters:
      - name: utorId
        in: path
        required: true
        description: UtorID of the author of the block (e.g. "rossbob2").
        schema:
          type: string
      - name: startTime
        in: path
        required: true
        description: ISO 8601 formatted time (e.g "2008-09-15T15:53:00").
        schema:
          type: string
      - name: slot
        in: path
        required: true
        description: Index of the slot in block array (e.g. 2).
        schema:
          type: integer
      responses:
        '200':
          description: Successfully returned slot.
          content:
            application/json:
              schema:
                type: object
                properties:
                  utorId:
                    type: string
                    description: UtorId of the assigned student (can be empty).
                  courseCode:
                    type: string
                    description: Course the slot is for.
                  note:
                    type: string
                    description: Note left by student. Should be deleted on updating student. Only viewable by TAs, Instructors, and relevant student.
                  
    put:
      summary: Edit student and note registered to slot.
      parameters:
      - in: path
        name: utorId
        required: true
        description: UtorID of the author of the block (e.g. "rossbob2").
        schema:
          type: string
      - in: path
        name: startTime
        required: true
        description: ISO 8601 formatted time (e.g "2008-09-15T15:53:00").
        schema:
          type: string
      - in: path
        name: slot
        required: true
        description: Index of the slot in block array (e.g. 2).
        schema:
          type: integer
      responses:
        '200':
          description: Successfully edited slot.

components:
  schemas:
    User:
      type: object
      properties:
        utorId:
          type: string
          example: rossbob2
        studentNumber:
          type: integer
          example: 1234567890
        firstName:
          type: string
          example: Bob
        lastName:
          type: string
          example: Ross
        role:
          type: string
          enum: [student, ta, instructor]
          example: instructor
        courses:
          type: array
          items:
            type: string
          example: [csc300, csc301, csc302]

    Course:
      type: object
      properties:
        instructors:
          type: array
          items:
            type: string
            description: UtorID.
          example: [rossbob2, billalexander5]
        tas:
          type: array
          items:
            type: string
            description: UtorID.
          example: [atat4, atst2]
        students:
          type: array
          items:
            type: string
            description: UtorID.
          example: [parkerpeter15, watsonmary25]

    Block:
      type: object
      description: Office hours section.
      properties:
        author:
          type: string
          description: UtorId of the instructor/TA author.
          example: rossbob2
        courseCodes:
          type: array
          description: All relevant courses.
          items:
            type: string
          example: [csc300, csc301, csc302]
        comment:
          type: string
          description: Comment left by instructor/TA.
          example: We don't make mistakes, just happy little accidents.
        startTime:
          type: string
          description: ISO 8601 formatted time.
          example: "2008-09-15T15:53:00"
        slotDuration:
          type: integer
          description: Milliseconds per slot.
          example: 300000
        slots:
          type: array
          description: A chronologically sorted dense array of slots. startTime + index * slotDuration = slot start time in ISO 8601 time.
          items:
            type: object
            properties:
              utorId:
                type: string
                description: UtorId of the assigned student (can be empty).
                example: parkerpeter15
              courseCode:
                type: string
                description: Course code this slot pertains to.
                example: csc302
              note:
                type: string
                description: Note left by student. Should be deleted on updating student. Only viewable by TAs, Instructors, and relevant student.
                example: Everybody gets one.

  requestBodies:
    UserBody:
      description: A JSON User object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    BlockBody:
      description: A JSON block object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Block'
    CourseBody:
      description: A JSON Course object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'
