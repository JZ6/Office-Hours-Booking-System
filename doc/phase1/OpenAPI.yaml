openapi: 3.0.0
info:
  title: Projekt Cool-Aid
  description: Office hours booking system. Legally distinct from the trademarked beverage.
  version: 0.0.1

security: # Session token AND API key required in general.
- bearerAuth: []
  apiKeyAuth: []

paths:
  /auth/{id}:
    post:
      security:
      - apiKeyAuth: []  # API key is required to request login.
      - HMAC: []
      summary: Returns a session token for a given identity. Password required for authorization.
      parameters:
      - name: id
        in: path
        required: true
        description: the id to be authorized
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/LoginBody'
      responses:
        '200':
          description: >
            Successfully authenticated.
            The session token is returned. You need to include this token in subsequent requests.
          content:
            application/json:
              schema:
                type: string
                example: XXXFUNKYTOKEN123XXX
  
  /identity/{id}:
    post:
      summary: Add/edit an identity.
      parameters:
      - name: id
        in: path
        required: true
        description: the id representing the new identity
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/IdentityBody'
      responses:
        '200':
          description: Successfully added user.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
    get:
      summary: Access information about an identity.
      parameters:
      - name: id
        in: path
        required: true
        description: UtorID or other identifier unique to the identity (e.g. "rossbob2").
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete an identity.
      parameters:
      - name: id
        in: path
        required: true
        description: UtorID or other identifier unique to the identity (e.g. "rossbob2").
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted user.
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /course/{courseCode}:
    post:
      summary: Add/edit a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        description: Course code (e.g. "csc302").
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CourseBody'
      responses:
        '200':
          description: Successfully added course.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      summary: Return a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        description: Course code (e.g. "csc302").
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned course.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        description: Course code (e.g. "csc302").
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted course.
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /block:
    post:
      summary: Add/edit a block. Editing is only available to the original creator of the block or the instructor assigned to it. Blocks with the same instructor cannot overlap.
      requestBody:
        $ref: '#/components/requestBodies/BlockBody'
      responses:
        '200':
          description: Successfully added block.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      summary: Return all blocks. Filtered based on identity of the session token -- includes blocks from all courses the identity is associated with (either as a student or instructor). Further filtering through query parameters is available.
      parameters:
      - in: query
        name: author
        description: UtorID of the author of the block (e.g. "rossbob2").
        schema:
          type: string
      - in: query
        name: startTime
        description: ISO 8601 formatted time (e.g "2008-09-15T15:53:00").
        schema:
          type: string
      - in: query
        name: courseCode
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned blocks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /blocks/{blockId}:
    get:
      summary: Return a specific block. Session token permissions determine whether booking details are included.
      parameters:
      - name: blockId
        in: path
        required: true
        description: Unique identifier of the requested block
        schema:
          type: string
      - name: startTime
        in: path
        required: true
        description: ISO 8601 formatted time (e.g "2008-09-15T15:53:00").
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned block.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete a specific block.
      parameters:
      - name: blockId
        in: path
        required: true
        description: Unique identifier of the block to be deleted
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted block.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /blocks/{blockId}/booking:
    post:
      summary: Book an appointment slot.
      parameters:
      - name: blockId
        in: path
        required: true
        description: Unique identifier of the appointment block.
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/BookingBody'
      responses:
        '200':
          description: Successfully booked appointment.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/BookingConflict'
      

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Identity:
      type: object
      properties:
        id:
          type: string
          example: rossbob2
        studentNumber:
          type: integer
          example: 1234567890
        firstName:
          type: string
          example: Bob
        lastName:
          type: string
          example: Ross
        role:
          type: string
          enum: [student, ta, instructor]
          example: instructor
        courses:
          type: array
          items:
            type: string
          example: [csc300, csc301, csc302]

    Course:
      type: object
      properties:
        instructors:
          type: array
          items:
            type: string
            description: UtorID.
          example: [rossbob2, billalexander5]
        tas:
          type: array
          items:
            type: string
            description: UtorID.
          example: [atat4, atst2]
        students:
          type: array
          items:
            type: string
            description: UtorID.
          example: [parkerpeter15, watsonmary25]

    Block:
      type: object
      description: Office hours section.
      properties:
        author:
          type: string
          description: UtorId of the instructor/TA author.
          example: rossbob2
        courseCodes:
          type: array
          description: All relevant courses.
          items:
            type: string
          example: [csc300, csc301, csc302]
        comment:
          type: string
          description: Comment left by instructor/TA.
          example: We don't make mistakes, just happy little accidents.
        startTime:
          type: string
          description: ISO 8601 formatted time in UTC.
          example: "2008-09-15T15:53:00"
        appointmentDuration:
          type: integer
          description: Milliseconds per slot.
          example: 300000
        appointmentSlots:
          type: array
          description: A chronologically sorted dense array of slots. startTime + index * slotDuration = slot start time in ISO 8601 time.
          items:
            type: object
            properties:
              utorId:
                type: string
                description: UtorId of the assigned student (can be empty).
                example: parkerpeter15
              courseCode:
                type: string
                description: Course code this slot pertains to.
                example: csc302
              note:
                type: string
                description: Note left by student. Should be deleted on updating student. Only viewable by TAs, Instructors, and relevant student.
                example: Everybody gets one.
    Login:
      type: object
      properties:
        identity:
          type: string
          example: rossbob2
          
    Booking:
      type: object
      properties:
        identity:
          type: string
          example: rossbob2
        startTime:
          type: integer
          example: 3

  requestBodies:
    LoginBody:
      description: A JSON containing an id string and an authentication string (e.g. password).
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
    IdentityBody:
      description: A JSON Identity object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Identity'
    BlockBody:
      description: A JSON block object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Block'
    CourseBody:
      description: A JSON Course object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'
    BookingBody:
      description: A JSON Booking object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Booking'
  
  responses:
    UnauthorizedError:
      description: Bearer token and/or API key is missing or invalid.
    BookingConflict:
      description: Appointment slot is already booked.
