openapi: 3.0.0
info:
  title: Projekt Cool-Aid
  description: Office hours booking system. Legally distinct from the trademarked beverage.
  version: 0.0.1

paths:
  /user:
    post:
      summary: Add/edit a user.
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '200':
          description: Successfully added user.

  /user/{utorId}:
    get:
      summary: Return a user.
      parameters:
      - name: utorId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user.
      parameters:
      - name: utorId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted user.

  /user/{utorId}/schedule:
    get:
      summary: Return a user's meetings along with relevant notes belonging to user.
      parameters:
      - name: utorId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully returned user's meetings and private notes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /course/{courseCode}:
    post:
      summary: Add/edit a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      requestBody:
        $ref: '#/components/requestBodies/CourseBody'
      responses:
        '200':
          description: Successfully added course.
    get:
      summary: Return a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Successfully returned course.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      summary: Delete a course.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Successfully deleted course.

  /course/{courseCode}/meetings:
    post:
      summary: Add/edit a meeting.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      requestBody:
        $ref: '#/components/requestBodies/MeetingBody'
      responses:
        '200':
          description: Successfully added meeting.
    get:
      summary: Return all meetings for course.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Successfully returned meetings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'

  /course/{courseCode}/meetings/{startTime}:
    get:
      summary: Return a meeting.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      - name: startTime
        in: path
        required: true
        schema:
          type: string
          description: ISO 8601 formatted time
      responses:
        '200':
          description: Successfully returned meeting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
    delete:
      summary: Delete a meeting.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      - name: startTime
        in: path
        required: true
        schema:
          type: string
          description: ISO 8601 formatted time
      responses:
        '200':
          description: Successfully deleted meeting.

  /course/{courseCode}/meetings/{startTime}/{interval}:
    get:
      summary: Return student name and associated notes for given interval.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      - name: startTime
        in: path
        required: true
        schema:
          type: string
          description: ISO 8601 formatted time
      - name: interval
        in: path
        required: true
        description: Index of the interval in Meeting array.
        schema:
          type: integer
      responses:
        '200':
          description: Successfully returned interval.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
    put:
      summary: Update student and note on interval.
      parameters:
      - name: courseCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Course'
      - name: startTime
        in: path
        required: true
        schema:
          type: string
          description: ISO 8601 formatted time
      - name: interval
        in: path
        required: true
        description: Index of the interval in Meeting array.
        schema:
          type: integer
      responses:
        '200':
          description: Successfully updated interval.

components:
  schemas:
    User:
      type: object
      properties:
        utorId:
          type: string
          example: rossbob2
        studentNumber:
          type: integer
          example: 1234567890
        firstName:
          type: string
          example: Bob
        lastName:
          type: string
          example: Ross
        role:
          type: string
          enum: [student, ta, instructor]
          example: instructor
        classes:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    Course:
      type: object
      properties:
        instructors:
          type: array
          items:
            $ref: '#/components/schemas/User'
        tas:
          type: array
          items:
            $ref: '#/components/schemas/User'

    Meeting:
      type: object
      description: Only editable by TAs and instructors.
      properties:
        instructor:
          type: string
          description: UtorId of the assigned instructor.
          example: rossbob2
        course:
          $ref: '#/components/schemas/Course'
        comment:
          type: string
          description: Comment left by instructor. Viewable by all.
          example: We don't make mistakes, just happy little accidents.
        startTime:
          type: string
          description: ISO 8601 formatted time. Combined with course code, unique identifier.
        intervalDuration:
          type: integer
          description: Milliseconds per interval.
        intervals:
          type: array
          description: A chronologically sorted dense array where startTime + index * intervalDuration = interval start time in ISO 8601 time. Editable by all.
          items:
            type: object
            properties:
              student:
                type: string
                description: UtorId of the assigned student (can be empty).
              note:
                type: string
                description: Note left by student. Should be deleted on updating student. Only viewable by TAs, Instructors, and relevant student.

  requestBodies:
    UserBody:
      description: A JSON User object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    MeetingBody:
      description: A JSON Meeting object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    CourseBody:
      description: A JSON Course object.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'
